#!/usr/bin/env python3
"""
Script pour cr√©er et sauvegarder un mod√®le Random Forest 
entra√Æn√© sur le dataset Iris.

Ce script charge le dataset Iris, entra√Æne un mod√®le Random Forest,
√©value ses performances et sauvegarde le mod√®le dans le dossier models_ai.
"""

import os
import joblib
import numpy as np
import pandas as pd
from sklearn.datasets import load_iris
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

def create_iris_random_forest_model():
    """
    Cr√©e et entra√Æne un mod√®le Random Forest sur le dataset Iris.
    
    Returns:
        RandomForestClassifier: Le mod√®le entra√Æn√©
        dict: Informations sur les performances du mod√®le
    """
    print("üå∏ Chargement du dataset Iris...")
    
    # Charger le dataset Iris
    iris = load_iris()
    X = iris.data  # Features: sepal_length, sepal_width, petal_length, petal_width
    y = iris.target  # Target: 0=Setosa, 1=Versicolor, 2=Virginica
    
    print(f"üìä Dataset charg√© avec succ√®s:")
    print(f"   - Nombre d'√©chantillons: {X.shape[0]}")
    print(f"   - Nombre de features: {X.shape[1]}")
    print(f"   - Classes: {iris.target_names}")
    
    # Diviser les donn√©es en ensembles d'entra√Ænement et de test
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42, stratify=y
    )
    
    print(f"‚úÇÔ∏è  Division des donn√©es:")
    print(f"   - Entra√Ænement: {X_train.shape[0]} √©chantillons")
    print(f"   - Test: {X_test.shape[0]} √©chantillons")
    
    # Cr√©er et entra√Æner le mod√®le Random Forest
    print("üå≥ Entra√Ænement du mod√®le Random Forest...")
    
    rf_model = RandomForestClassifier(
        n_estimators=100,          # Nombre d'arbres
        max_depth=None,            # Profondeur maximale (None = pas de limite)
        min_samples_split=2,       # Minimum d'√©chantillons pour diviser un n≈ìud
        min_samples_leaf=1,        # Minimum d'√©chantillons dans une feuille
        random_state=42           # Pour la reproductibilit√©
    )
    
    rf_model.fit(X_train, y_train)
    
    # √âvaluer le mod√®le
    print("üìà √âvaluation du mod√®le...")
    
    # Pr√©dictions sur l'ensemble de test
    y_pred = rf_model.predict(X_test)
    
    # Calculer l'accuracy
    accuracy = accuracy_score(y_test, y_pred)
    print(f"üéØ Accuracy sur l'ensemble de test: {accuracy:.4f} ({accuracy*100:.2f}%)")
    
    # Validation crois√©e
    cv_scores = cross_val_score(rf_model, X, y, cv=5)
    print(f"üîÑ Validation crois√©e (5-fold):")
    print(f"   - Score moyen: {cv_scores.mean():.4f} (¬±{cv_scores.std()*2:.4f})")
    
    # Rapport de classification d√©taill√©
    print("\nüìã Rapport de classification:")
    print(classification_report(y_test, y_pred, target_names=iris.target_names))
    
    # Matrice de confusion
    print("üî¢ Matrice de confusion:")
    cm = confusion_matrix(y_test, y_pred)
    print(cm)
    
    # Importance des features
    print("\nüèÜ Importance des features:")
    feature_importance = pd.DataFrame({
        'feature': iris.feature_names,
        'importance': rf_model.feature_importances_
    }).sort_values('importance', ascending=False)
    
    for idx, row in feature_importance.iterrows():
        print(f"   {row['feature']}: {row['importance']:.4f}")
    
    # Informations sur le mod√®le
    model_info = {
        'accuracy': accuracy,
        'cv_mean_score': cv_scores.mean(),
        'cv_std_score': cv_scores.std(),
        'feature_importance': feature_importance.to_dict('records'),
        'confusion_matrix': cm.tolist(),
        'classes': list(iris.target_names),
        'feature_names': list(iris.feature_names)
    }
    
    return rf_model, model_info

def save_model(model, model_info, model_path):
    """
    Sauvegarde le mod√®le et ses informations.
    
    Args:
        model: Le mod√®le entra√Æn√©
        model_info: Informations sur le mod√®le
        model_path: Chemin o√π sauvegarder le mod√®le
    """
    print(f"üíæ Sauvegarde du mod√®le vers: {model_path}")
    
    # Cr√©er le dossier s'il n'existe pas
    os.makedirs(os.path.dirname(model_path), exist_ok=True)
    
    # Sauvegarder le mod√®le
    joblib.dump(model, model_path)
    
    # Sauvegarder les informations du mod√®le
    info_path = model_path.replace('.pkl', '_info.pkl')
    joblib.dump(model_info, info_path)
    
    print(f"‚úÖ Mod√®le sauvegard√© avec succ√®s!")
    print(f"   - Mod√®le: {model_path}")
    print(f"   - Informations: {info_path}")

def test_model(model_path):
    """
    Test rapide du mod√®le sauvegard√© avec des exemples.
    
    Args:
        model_path: Chemin vers le mod√®le sauvegard√©
    """
    print(f"\nüß™ Test du mod√®le charg√© depuis: {model_path}")
    
    # Charger le mod√®le
    model = joblib.load(model_path)
    
    # Exemples de test (mesures typiques pour chaque classe)
    test_samples = [
        [5.1, 3.5, 1.4, 0.2],  # Setosa typique
        [7.0, 3.2, 4.7, 1.4],  # Versicolor typique
        [6.3, 3.3, 6.0, 2.5]   # Virginica typique
    ]
    
    sample_names = ['Setosa typique', 'Versicolor typique', 'Virginica typique']
    class_names = ['Setosa', 'Versicolor', 'Virginica']
    
    print("üîÆ Pr√©dictions sur des √©chantillons tests:")
    for i, (sample, name) in enumerate(zip(test_samples, sample_names)):
        prediction = model.predict([sample])[0]
        probability = model.predict_proba([sample])[0]
        
        print(f"   {name}:")
        print(f"      Features: {sample}")
        print(f"      Pr√©diction: {class_names[prediction]}")
        print(f"      Probabilit√©s: {dict(zip(class_names, probability.round(4)))}")

def main():
    """
    Fonction principale pour cr√©er le mod√®le Random Forest Iris.
    """
    print("üöÄ Cr√©ation du mod√®le Random Forest pour le dataset Iris")
    print("=" * 60)
    
    try:
        # Cr√©er et entra√Æner le mod√®le
        model, model_info = create_iris_random_forest_model()
        
        # D√©finir le chemin de sauvegarde
        base_dir = os.path.dirname(os.path.abspath(__file__))
        models_dir = os.path.join(base_dir, 'models_ai')
        model_path = os.path.join(models_dir, 'random_forest_model.pkl')
        
        # Sauvegarder le mod√®le
        save_model(model, model_info, model_path)
        
        # Tester le mod√®le
        test_model(model_path)
        
        print("\nüéâ Processus termin√© avec succ√®s!")
        print(f"Le mod√®le est pr√™t √† √™tre utilis√© dans votre application Django.")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation du mod√®le: {str(e)}")
        raise

if __name__ == "__main__":
    main()
