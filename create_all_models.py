#!/usr/bin/env python3
"""
Script principal pour cr√©er tous les mod√®les de Machine Learning.

Ce script ex√©cute tous les scripts de cr√©ation de mod√®les :
- Random Forest
- Decision Tree  
- AdaBoost
- XGBoost
- SVM

Usage:
    python create_all_models.py
"""

import os
import sys
import subprocess
import time

def run_script(script_name):
    """
    Ex√©cute un script et g√®re les erreurs.
    
    Args:
        script_name: Nom du script √† ex√©cuter
        
    Returns:
        bool: True si succ√®s, False sinon
    """
    print(f"\n{'='*60}")
    print(f"üöÄ Ex√©cution de {script_name}...")
    print(f"{'='*60}")
    
    try:
        # Ex√©cuter le script
        result = subprocess.run([sys.executable, script_name], 
                              capture_output=False, 
                              check=True)
        
        print(f"‚úÖ {script_name} termin√© avec succ√®s!")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de l'ex√©cution de {script_name}: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur inattendue avec {script_name}: {e}")
        return False

def main():
    """
    Fonction principale qui ex√©cute tous les scripts de cr√©ation de mod√®les.
    """
    print("üß† CR√âATION DE TOUS LES MOD√àLES DE MACHINE LEARNING")
    print("="*60)
    
    # V√©rifier que nous sommes dans le bon r√©pertoire
    scripts_dir = 'scripts'
    if not os.path.exists(scripts_dir):
        print("‚ùå Le dossier 'scripts' n'existe pas. Ex√©cutez ce script depuis le dossier racine du projet.")
        return
    
    # Liste des scripts √† ex√©cuter
    scripts = [
        'scripts/create_random_forest_models.py',
        'scripts/create_decision_tree_models.py',
        'scripts/create_adaboost_models.py',
        'scripts/create_xgboost_models.py',
        'scripts/create_svm_models.py'
    ]
    
    # Statistiques
    start_time = time.time()
    success_count = 0
    total_scripts = len(scripts)
    
    # Ex√©cuter chaque script
    for script in scripts:
        if os.path.exists(script):
            if run_script(script):
                success_count += 1
                time.sleep(2)  # Petite pause entre les scripts
            else:
                print(f"‚ö†Ô∏è  Continuer avec les autres scripts...")
        else:
            print(f"‚ùå Script non trouv√©: {script}")
    
    # R√©sum√© final
    end_time = time.time()
    duration = end_time - start_time
    
    print(f"\n{'='*60}")
    print("üìä R√âSUM√â FINAL")
    print(f"{'='*60}")
    print(f"‚úÖ Scripts r√©ussis: {success_count}/{total_scripts}")
    print(f"‚è±Ô∏è  Temps total: {duration:.1f} secondes")
    
    if success_count == total_scripts:
        print("üéâ TOUS LES MOD√àLES ONT √âT√â CR√â√âS AVEC SUCC√àS!")
        print("\nüìÅ Mod√®les disponibles dans models_ai/:")
        
        # Lister les mod√®les cr√©√©s
        models_dir = 'models_ai'
        if os.path.exists(models_dir):
            models = os.listdir(models_dir)
            models.sort()
            
            # Grouper par algorithme
            algorithms = {}
            for model in models:
                if model.endswith('.pkl'):
                    algo = model.split('_')[0]
                    if algo not in algorithms:
                        algorithms[algo] = []
                    algorithms[algo].append(model)
            
            for algo, files in algorithms.items():
                print(f"\nüîπ {algo.upper()}:")
                for file in files:
                    print(f"   - {file}")
        
        print(f"\nüåê Vous pouvez maintenant tester l'application Django:")
        print(f"   python manage.py runserver")
        
    else:
        print(f"‚ö†Ô∏è  Certains mod√®les n'ont pas pu √™tre cr√©√©s.")
        print(f"V√©rifiez les logs ci-dessus pour plus de d√©tails.")

if __name__ == "__main__":
    main()
